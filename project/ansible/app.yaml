- name: Run application
  hosts: apps
  become: true
  vars:
    project_dir: /opt/cms
    cms_admin: "admin"
    cms_admin_password: "secret"

  tasks:
    - name: Install common
      ansible.builtin.import_role:
        name: common-config-docker

    # --- Static routes to internal network

    - name: Add static route
      ansible.builtin.blockinfile:
        path: /etc/sysconfig/network-scripts/route-eth1
        create: true
        block: |
          10.10.1.0/24 via 192.168.1.101

    - name: Restart network service
      ansible.builtin.systemd:
        name: NetworkManager
        state: restarted

    # --- Run application

    - name: Create project directory
      ansible.builtin.file:
        path: "{{ project_dir }}"
        state: directory
        mode: "0775"
        owner: vagrant
        group: vagrant

    - name: Copy compose file
      ansible.builtin.copy:
        src: "docker-compose.yaml"
        dest: "{{ project_dir }}/docker-compose.yaml"
        owner: vagrant
        group: vagrant

    - name: Copy env file
      ansible.builtin.copy:
        src: "env-local"
        dest: "{{ project_dir }}/.env-local"
        owner: vagrant
        group: vagrant

    - name: Migrate database
      ansible.builtin.shell:
        cmd: docker compose run web python manage.py migrate
        chdir: "{{ project_dir }}"

    - name: Start cms service
      community.docker.docker_compose:
        project_src: "{{ project_dir }}"
        state: present
        services:
          - web

    - name: Create superuser (if not exists)
      community.docker.docker_container_exec:
        container: cms_web_1
        argv:
          - python
          - manage.py
          - shell
          - "-c"
          - "from django.contrib.auth.hashers import make_password;
            from django.contrib.auth import get_user_model;
            MyUser = get_user_model();
            MyUser.objects.filter( username__exact = '{{ cms_admin }}' ).count() == 0 or exit();
            new_super_user = MyUser(username = '{{ cms_admin }}', email='{{ cms_admin }}@example.com', is_superuser = True, is_staff = True );
            new_super_user.password = make_password('{{ cms_admin_password }}');
            new_super_user.save();"

