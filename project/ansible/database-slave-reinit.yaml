- name: Config databse hosts and install postgres
  hosts: "{{ target | default('no_hosts') }}"
  become: true
  tasks:
    - name: Install common
      ansible.builtin.import_role:
        name: common-config

    # --- Конфигурация сетевого экрана

    - name: Move eth1 to internal zone
      ansible.builtin.shell: "firewall-cmd --zone=internal --change-interface=eth1 --permanent"

    - name: Enable postgresql service in zone
      ansible.posix.firewalld:
        zone: internal
        service: postgresql
        permanent: true
        state: enabled

    - name: Reload firewalld
      ansible.builtin.service:
        name: firewalld
        state: reloaded

    # --- Установка БД и сопуствующих утилит

    - name: Install libs
      ansible.builtin.dnf:
        name:
          - python3-pexpect.noarch
          - python3-psycopg2
        state: present
        update_cache: true

    - name: Install progress
      ansible.builtin.import_role:
        name: postgres-install


- name: Config replication slave
  hosts: "{{ target | default('no_hosts') }}"
  become: true
  tasks:
    - name: Stop postgres
      ansible.builtin.service:
        name: postgresql-14
        state: stopped

    - name: Remove old data
      ansible.builtin.file:
        path: /var/lib/pgsql/14/data
        state: absent

    - name: Request basebackup
      ansible.builtin.expect:
        command: 'pg_basebackup -h 10.10.1.131 -U  replicator -p 5432 -D /var/lib/pgsql/14/data/ -R -P'
        responses: 
          '.*Password*': "secret"
      become_user: postgres

    - name: Copy config file
      ansible.builtin.copy:
        src: postgresql.conf
        dest: /var/lib/pgsql/14/data/postgresql.conf
        force: true

    - name: Restart postgres
      ansible.builtin.service:
        name: postgresql-14
        state: restarted

- name: Barman config
  hosts: backup_outline
  become: true
  vars:
    master: db1
  tasks:
    - name: install barman on database hosts
      ansible.builtin.dnf:
        name:
          - barman
          - barman-cli
        state: present
        update_cache: true
      when: (ansible_hostname == master)

    # --- Генерируем ssh ключи на barman и на мастер-реплике

    #  Генерируем SSH-ключ для пользователя postgres на хосте master
    - name: generate SSH key for postgres
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == master)

    #  Забираем содержимое открытого ключа с master
    - name: fetch all public ssh keys master
      ansible.builtin.shell: cat /var/lib/pgsql/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == master)

    #  Копируем ключ с master на barman
    - name: transfer public key to barman
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ ansible_hostname }}"
        user: barman
      delegate_to: storage
      when: (ansible_hostname == master)

    #  Генерируем SSH-ключ для пользователя barman на хосте barman
    - name: generate SSH key for barman
      ansible.builtin.user:
        name: barman
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == "storage")

    #  Забираем содержимое открытого ключа barman c хоста barman 
    - name: fetch all public ssh keys barman
      ansible.builtin.shell: cat /var/lib/barman/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == "storage")

    - name: transfer public key to master
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: postgres
      delegate_to: "{{master}}"
      when: (ansible_hostname == "storage")
