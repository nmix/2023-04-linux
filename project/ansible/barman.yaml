- name: Config barman host
  hosts: barman
  become: true
  vars:
    master_ip: '10.10.1.131'
    master_user: 'postgres'
    barman_ip: '10.10.1.141'
    barman_user: 'barman'
    barman_user_password: 'secret'
  tasks:
    - name: Install common
      ansible.builtin.import_role:
        name: common-config

    # --- Конфигурация сетевого экрана

    - name: Move eth1 to internal zone
      ansible.builtin.shell: "firewall-cmd --zone=internal --change-interface=eth1 --permanent"

    - name: Enable postgresql service in zone
      ansible.posix.firewalld:
        zone: internal
        service: postgresql
        permanent: true
        state: enabled

    - name: Reload firewalld
      ansible.builtin.service:
        name: firewalld
        state: reloaded

    # --- Установка barman

    - name: Install base tools
      ansible.builtin.dnf:
        name:
          - python3-pexpect.noarch
          - python3-psycopg2
          - bash-completion 
          - wget 
        state: present
        update_cache: true

    - name: install repo
      ansible.builtin.shell: |
        dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm

    - name: disable old postgresql module
      ansible.builtin.shell: dnf -qy module disable postgresql

    - name: install barman and postgresql packages on barman
      ansible.builtin.dnf:
        name:
          - barman
          - barman-cli
          - postgresql14
        state: present
        update_cache: true

    # Копируем файл .pgpass
    - name: copy .pgpass
      template:
        src: .pgpass.j2
        dest: /var/lib/barman/.pgpass
        owner: barman
        group: barman
        mode: '0600'

    # Копируем файл barman.conf
    - name: copy barman.conf
      template:
        src: barman.conf.j2
        dest: /etc/barman.conf 
        owner: barman
        group: barman
        mode: '0755'

    - name: create barman.d directory
      file:
        path: /etc/barman.d
        state: directory
        owner: barman
        group: barman
        mode: '0755'

    # Копируем файл master.conf
    - name: copy db1.conf
      template:
        src: db1.conf.j2
        dest: /etc/barman.d/db1.conf
        owner: barman
        group: barman
        mode: '0755'
      when: (ansible_hostname == "barman")


- name: Config backup
  hosts: backup_outline
  become: true
  vars:
    master: "db1"
    slave: "db2"
  tasks:
    - name: install barman on database hosts
      ansible.builtin.dnf:
        name:
          - barman
          - barman-cli
        state: present
        update_cache: true
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    # --- Генерируем ssh ключи на barman и на мастер-реплике

    #  Генерируем SSH-ключ для пользователя postgres на хосте master
    - name: generate SSH key for postgres
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == master)

    #  Забираем содержимое открытого ключа с master
    - name: fetch all public ssh keys master
      ansible.builtin.shell: cat /var/lib/pgsql/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == master)

    #  Копируем ключ с master на barman
    - name: transfer public key to barman
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: barman
      delegate_to: barman
      when: (ansible_hostname == master)

    #  Генерируем SSH-ключ для пользователя barman на хосте barman
    - name: generate SSH key for barman
      ansible.builtin.user:
        name: barman
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == "barman")

    #  Забираем содержимое открытого ключа barman c хоста barman 
    - name: fetch all public ssh keys barman
      ansible.builtin.shell: cat /var/lib/barman/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == "barman")

    #  Копируем ключ с barman на master
    - name: transfer public key to barman
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: postgres
      delegate_to: "{{master}}"
      when: (ansible_hostname == "barman")


    # CREATE USER barman SUPERUSER;
    - name: Create barman user
      ansible.builtin.postgresql_user:
        name: barman
        password: 'secret'
        role_attr_flags: SUPERUSER 
      become_user: postgres
      ignore_errors: true
      when: (ansible_hostname == master)

     # Добавляем разрешения для поключения с хоста barman
    - name: Add permission for barman
      lineinfile:
        path: /var/lib/pgsql/14/data/pg_hba.conf
        line: 'host    all   barman    10.10.1.141/32    scram-sha-256'
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    # Добавляем разрешения для подключения с хоста barman
    - name: Add permission for barman
      lineinfile:
        path: /var/lib/pgsql/14/data/pg_hba.conf
        line: 'host    replication   barman    10.10.1.141/32    scram-sha-256'
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    # Перезагружаем службу postgresql-server
    - name: restart postgresql-server on master
      service: 
        name: postgresql-14
        state: restarted
      when: (ansible_hostname == master)

    - name: barman switch-wal db1
      ansible.builtin.shell: barman switch-wal db1
      become_user: barman
      when: (ansible_hostname == "barman")

    - name: barman cron
      ansible.builtin.shell: barman cron
      become_user: barman
      when: (ansible_hostname == "barman")

    - name: create backup
      ansible.builtin.shell: barman backup db1
      become_user: barman
      when: (ansible_hostname == "barman")

