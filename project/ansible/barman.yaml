- name: Config barman backuping
  hosts: fs
  become: true
  vars:
    master_user: "postgres"
    barman_ip: "10.10.1.141"
    barman_user: "{{ vault_barman_user }}"
    barman_user_password: "{{ vault_barman_password }}"
  tasks:
    - name: Install common
      ansible.builtin.import_role:
        name: common-config-docker

    # --- Config firewalld

    - name: Move eth1 to internal zone
      ansible.builtin.shell: "firewall-cmd --zone=internal --change-interface=eth1 --permanent"

    - name: Reload firewalld
      ansible.builtin.service:
        name: firewalld
        state: reloaded

    # --- Установка barman

    - name: Install base tools
      ansible.builtin.dnf:
        name:
          - python3-pexpect.noarch
          - python3-psycopg2
          - bash-completion 
          - wget 
        state: present
        update_cache: true

    - name: install repo
      ansible.builtin.shell: |
        dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm

    - name: disable old postgresql module
      ansible.builtin.shell: dnf -qy module disable postgresql

    - name: install barman and postgresql packages on barman
      ansible.builtin.dnf:
        name:
          - barman
          - barman-cli
          - postgresql14
        state: present
        update_cache: true

    # Копируем файл .pgpass
    - name: copy .pgpass
      template:
        src: .pgpass.j2
        dest: /var/lib/barman/.pgpass
        owner: barman
        group: barman
        mode: '0600'

    # Копируем файл barman.conf
    - name: copy barman.conf
      template:
        src: barman.conf.j2
        dest: /etc/barman.conf
        owner: barman
        group: barman
        mode: '0755'

    - name: create barman.d directory
      file:
        path: /etc/barman.d
        state: directory
        owner: barman
        group: barman
        mode: '0755'

    - name: copy server config
      template:
        src: db.conf.j2
        dest: "/etc/barman.d/{{ db_hostname }}.conf"
        owner: barman
        group: barman
        mode: '0755'
      vars:
        db_hostname: "{{ item.db_hostname }}"
        db_ip: "{{ item.db_ip }}"
        active: "{{ item.active }}"
      with_items:
        - { db_hostname: "db1", db_ip: "10.10.1.131", active: "true" }
        - { db_hostname: "db2", db_ip: "10.10.1.132", active: "false" }
      when: (ansible_hostname == "fs")

- name: Config backup
  hosts: db_outline
  become: true
  vars:
    master: "db1"
    slave: "db2"
  tasks:
    - name: install barman on database hosts
      ansible.builtin.dnf:
        name:
          - barman
          - barman-cli
        state: present
        update_cache: true
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    # --- Генерируем ssh ключи на barman и на мастер-реплике

    #  Генерируем SSH-ключ для пользователя postgres на хосте master
    - name: generate SSH key for postgres
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == master)

    #  Забираем содержимое открытого ключа с master
    - name: fetch all public ssh keys master
      ansible.builtin.shell: cat /var/lib/pgsql/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == master)

    #  Копируем ключ с master на barman
    - name: transfer public key to barman
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ ansible_hostname }}"
        user: barman
      delegate_to: fs
      when: (ansible_hostname == master)

    #  Генерируем SSH-ключ для пользователя barman на хосте barman
    - name: generate SSH key for barman
      ansible.builtin.user:
        name: barman
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == "fs")

    #  Забираем содержимое открытого ключа barman c хоста barman 
    - name: fetch all public ssh keys barman
      ansible.builtin.shell: cat /var/lib/barman/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == "fs")

    - name: transfer public key to master
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: postgres
      delegate_to: "{{master}}"
      when: (ansible_hostname == "fs")


    # --- Генерируем ssh ключи на barman и на slave-реплике

    #  Генерируем SSH-ключ для пользователя postgres на хосте slave
    - name: generate SSH key for postgres
      ansible.builtin.user:
        name: postgres
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == slave)

    #  Забираем содержимое открытого ключа с slave
    - name: fetch all public ssh keys master
      ansible.builtin.shell: cat /var/lib/pgsql/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == slave)

    #  Копируем ключ с slave на barman
    - name: transfer public key to barman from slave
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ ansible_hostname }}"
        user: barman
      delegate_to: fs
      when: (ansible_hostname == slave)

    #  Генерируем SSH-ключ для пользователя barman на хосте barman
    - name: generate SSH key for barman
      ansible.builtin.user:
        name: barman
        shell: /bin/bash
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        force: no
      when: (ansible_hostname == "fs")

    #  Забираем содержимое открытого ключа barman c хоста barman 
    - name: fetch all public ssh keys barman
      ansible.builtin.shell: cat /var/lib/barman/.ssh/id_rsa.pub
      register: ssh_keys
      when: (ansible_hostname == "fs")

    - name: transfer public key to slave
      ansible.builtin.authorized_key:
        key: "{{ ssh_keys.stdout }}"
        comment: "{{ansible_hostname}}"
        user: postgres
      delegate_to: "{{ slave }}"
      when: (ansible_hostname == "fs")


    # CREATE USER barman SUPERUSER;
    - name: Create barman user
      ansible.builtin.postgresql_user:
        name: "{{ vault_barman_user }}"
        password: "{{ vault_barman_password }}"
        role_attr_flags: SUPERUSER 
      become_user: postgres
      ignore_errors: true
      when: (ansible_hostname == master) 

    # Добавляем разрешения для поключения с хоста barman
    - name: Add permission for barman
      lineinfile:
        path: /var/lib/pgsql/14/data/pg_hba.conf
        line: 'host    all   barman    10.10.1.141/32    scram-sha-256'
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    # Добавляем разрешения для подключения с хоста barman
    - name: Add permission for barman
      lineinfile:
        path: /var/lib/pgsql/14/data/pg_hba.conf
        line: 'host    replication   barman    10.10.1.141/32    scram-sha-256'
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    # Перезагружаем службу postgresql-server
    - name: restart postgresql-server
      service: 
        name: postgresql-14
        state: restarted
      when: (ansible_hostname == master) or (ansible_hostname == slave) 

    - name: barman switch-wal master
      ansible.builtin.shell: barman switch-wal --force db1
      become_user: barman
      when: (ansible_hostname == "fs")

    - name: barman cron
      ansible.builtin.shell: barman cron
      become_user: barman
      when: (ansible_hostname == "fs")

    - name: create backup cronjob
      ansible.builtin.cron:
        name: create backup
        minute: "15"
        hour: "0"
        job: "barman cron && barman backup db1"
      become_user: barman
      when: (ansible_hostname == "fs")

- name: Run exporters
  hosts: barman
  become: true
  tasks:
    - name: Install edge duckprom node
      ansible.builtin.import_role:
        name: nmix.duckprom
      vars:
        duckprom_dir: /opt/duckprom
        duckprom_grafana_host: 10.10.1.143
        duckprom_basic_auth_enabled: false
